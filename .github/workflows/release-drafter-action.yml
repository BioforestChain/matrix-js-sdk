name: Draft Release
on:
    workflow_call:
        secrets:
            ELEMENT_BOT_TOKEN:
                required: true
            NPM_TOKEN:
                required: false
            GPG_PASSPHRASE:
                required: false
            GPG_PRIVATE_KEY:
                required: false
        inputs:
            version-bump:
                description: The scale of the version bump required for semver compatibility [automatic|patch|minor|major]
                required: true
                type: string
            final:
                description: Make final release
                required: true
                default: false
                type: boolean
            previous-version:
                description: What release to use as a base for release note purposes, defaults to the latest stable release.
                required: false
                type: string
            dependencies:
                description: |
                    List of dependencies to update in `npm-dep=version` format.
                type: string
                required: false
            include-changes:
                description: Project to include changelog entries from in this release.
                type: string
                required: false
            gpg-fingerprint:
                description: Fingerprint of the GPG key to use for signing the git tag and assets, if any.
                type: string
                required: false
            asset-path:
                description: |
                    The path to the asset you want to upload, if any. You can use glob patterns here.
                    Will be GPG signed and an `.asc` file included in the release artifacts if `gpg-fingerprint` is set.
                type: string
                required: false
            expected-asset-count:
                description: The number of expected assets, including signatures, excluding generated zip & tarball.
                type: number
                required: false
            yarn-pack:
                description: Whether to run `yarn pack` as a dry-run
                type: boolean
                required: false
                default: false
concurrency: release-drafter-action
jobs:
    draft:
        runs-on: ubuntu-latest
        environment: Release
        steps:
            - name: Load GPG key
              id: gpg
              if: inputs.gpg-fingerprint
              uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6
              with:
                  gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
                  passphrase: ${{ secrets.GPG_PASSPHRASE }}
                  fingerprint: ${{ inputs.gpg-fingerprint }}

            - uses: actions/checkout@v4
              with:
                  ref: staging
                  token: ${{ secrets.ELEMENT_BOT_TOKEN }}
                  fetch-depth: 0

            - name: Get actions scripts
              uses: actions/checkout@v4
              with:
                  repository: matrix-org/matrix-js-sdk
                  persist-credentials: false
                  path: .action-repo
                  sparse-checkout: |
                      .github/actions
                      scripts/release

            - uses: actions/setup-node@v4
              with:
                  cache: "yarn"

            - name: Install dependencies
              run: "yarn install --frozen-lockfile"

            - name: Update dependencies
              id: update-dependencies
              if: inputs.dependencies
              run: |
                  UPDATED=()
                  FOOTER="\n## Dependencies\n"
                  while IFS= read -r DEPENDENCY; do
                      [ -z "$DEPENDENCY" ] && continue
                      IFS="=" read -r PACKAGE UPDATE_VERSION <<< "$DEPENDENCY"

                      CURRENT_VERSION=$(cat package.json | jq -r .dependencies[\"$PACKAGE\"])
                      echo "Current $PACKAGE version is $CURRENT_VERSION"

                      if [ "$CURRENT_VERSION" == "null" ]
                      then
                          echo "Unable to find $PACKAGE in package.json"
                          exit 1
                      fi

                      FOOTER+="$PACKAGE - $UPDATE_VERSION\n"
                      if [ "$UPDATE_VERSION" == "$CURRENT_VERSION" ]
                      then
                          echo "Not updating dependency $PACKAGE"
                          continue
                      fi

                      echo "Upgrading $PACKAGE to $UPDATE_VERSION..."
                      yarn upgrade "$PACKAGE@$UPDATE_VERSION" --exact
                      git add -u
                      git commit -m "Upgrade $PACKAGE to $UPDATE_VERSION"
                      UPDATED+=("$PACKAGE")
                  done <<< "$DEPENDENCIES"

                  JSON=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${UPDATED[@]}")
                  echo "updated=$JSON" >> $GITHUB_OUTPUT

                  echo "footer=$FOOTER" >> $GITHUB_OUTPUT
              env:
                  DEPENDENCIES: ${{ inputs.dependencies }}

            - name: Prevent develop dependencies
              if: inputs.dependencies
              run: |
                  ret=0
                  cat package.json | jq '.dependencies[]' | grep -q '#develop' || ret=$?
                  if [ "$ret" -eq 0 ]; then
                      echo "package.json contains develop dependencies. Refusing to release."
                      exit 1
                  fi

            - id: version-bump
              name: Set version bump
              if: inputs.version-bump != 'automatic'
              run: |
                  echo "increment=$INCREMENT" >> $GITHUB_OUTPUT
              env:
                  INCREMENT: ${{ inputs.final == false && 'pre' || '' }}${{ inputs.version-bump }}

            - id: draft-release
              name: Upsert draft release
              uses: t3chguy/release-drafter@5c9fa24ff11c92da228955d89081246110c8117c
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  disable-autolabeler: true
                  previous-version: ${{ inputs.previous-version }}
                  version-key-increment: ${{ steps.version-bump.outputs.increment }}
                  footer: ${{ steps.update-dependencies.outputs.footer }}

            - name: Prepare variables
              id: prepare
              run: |
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
                  {
                      echo "RELEASE_NOTES<<EOF"
                      echo "$BODY"
                      echo "EOF"
                  } >> $GITHUB_ENV

                  HAS_DIST=0
                  jq -e .scripts.dist package.json >/dev/null 2>&1 && HAS_DIST=1
                  echo "has-dist-script=$HAS_DIST" >> $GITHUB_OUTPUT

                  echo "package=$(cat package.json | jq -r .name)" >> $GITHUB_OUTPUT
                  echo "version-changed=$(cat package.json | jq -r .version)" >> $GITHUB_OUTPUT
              env:
                  BODY: ${{ steps.draft-release.outputs.body }}
                  VERSION: ${{ steps.draft-release.outputs.tag_name }}

            - name: Set up git
              run: |
                  git config --global user.email "releases@riot.im"
                  git config --global user.name "RiotRobot"

            - name: Check version number not in use
              uses: actions/github-script@v7
              with:
                  script: |
                      const { VERSION } = process.env;
                      github.rest.repos.getReleaseByTag({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          tag: VERSION,
                      }).then(() => {
                          core.setFailed(`Version ${VERSION} already exists`);
                      }).catch(() => {
                        // This is fine, we expect there to not be any release with this version yet
                      });

            - name: Bump package.json version
              run: yarn version --no-git-tag-version --new-version "${VERSION#v}"

            - name: Ingest upstream changes
              if: |
                  inputs.include-changes &&
                  (!inputs.dependencies || contains(fromJSON(steps.update-dependencies.outputs.updated), inputs.include-changes))
              uses: actions/github-script@v7
              env:
                  RELEASE_ID: ${{ steps.draft-release.outputs.id }}
                  DEPENDENCY: ${{ inputs.include-changes }}
              with:
                  retries: 3
                  script: |
                      const { RELEASE_ID: releaseId, DEPENDENCY, VERSION } = process.env;
                      const { owner, repo } = context.repo;
                      const script = require("./.action-repo/scripts/release/merge-release-notes.js");
                      const notes = await script({
                          github,
                          releaseId,
                          dependencies: [DEPENDENCY.replace("$VERSION", VERSION)],
                      });
                      core.exportVariable("RELEASE_NOTES", notes);

                      await github.rest.repos.updateRelease({
                          owner,
                          repo,
                          release_id: releaseId,
                          body: notes,
                      });

            - name: Add to CHANGELOG.md
              if: inputs.final
              run: |
                  mv CHANGELOG.md CHANGELOG.md.old
                  HEADER="Changes in [${VERSION#v}](https://github.com/${{ github.repository }}/releases/tag/$VERSION) ($(date '+%Y-%m-%d'))"

                  {
                      echo "$HEADER"
                      printf '=%.0s' $(seq ${#HEADER})
                      echo ""
                      echo "$RELEASE_NOTES"
                      echo ""
                  } > CHANGELOG.md

                  cat CHANGELOG.md.old >> CHANGELOG.md
                  rm CHANGELOG.md.old
                  git add CHANGELOG.md

            - name: Run pre-release script to update package.json fields
              run: |
                  ./.action-repo/scripts/release/pre-release.sh
                  git add package.json

            - name: Commit changes
              run: |
                  if [[ `git status --porcelain -uno` ]]; then
                      git commit -m "$VERSION"
                  fi

            - name: Build assets
              if: steps.prepare.outputs.has-dist-script == '1'
              run: DIST_VERSION="$VERSION" yarn dist

            - name: Upload release assets & signatures
              if: inputs.asset-path
              uses: ./.action-repo/.github/actions/upload-release-assets
              with:
                  gpg-fingerprint: ${{ inputs.gpg-fingerprint }}
                  upload-url: ${{ steps.draft-release.outputs.upload_url }}
                  asset-path: ${{ inputs.asset-path }}

            - name: Yarn pack
              if: inputs.yarn-pack
              run: yarn pack

            - name: Stash yarn pack output
              if: inputs.yarn-pack
              uses: actions/upload-artifact@v4
              with:
                  name: yarn-pack
                  path: ${{ steps.prepare.outputs.package }}-${{ steps.draft-release.outputs.tag_name }}.tgz

            - name: Create signed tag
              if: inputs.gpg-fingerprint
              run: |
                  GIT_COMMITTER_EMAIL="$SIGNING_ID" GPG_TTY=$(tty) git tag -u "$SIGNING_ID" -m "Release $VERSION" "$VERSION"
              env:
                  SIGNING_ID: ${{ steps.gpg.outputs.email }}

            - name: Generate & upload tarball signature
              if: inputs.gpg-fingerprint
              uses: ./.action-repo/.github/actions/sign-release-tarball
              with:
                  gpg-fingerprint: ${{ inputs.gpg-fingerprint }}
                  upload-url: ${{ steps.draft-release.outputs.upload_url }}

            # We defer pushing changes until after the release assets are built,
            # signed & uploaded to improve the atomicity of this action.
            - name: Push changes to staging
              run: |
                  git push origin staging $TAG
                  git reset --hard
              env:
                  TAG: ${{ inputs.gpg-fingerprint && env.VERSION || '' }}

            - name: Validate tarball signature
              if: inputs.gpg-fingerprint
              run: |
                  wget https://github.com/$GITHUB_REPOSITORY/archive/refs/tags/$VERSION.tar.gz
                  gpg --verify "$VERSION.tar.gz.asc" "$VERSION.tar.gz"

            - name: Validate release has expected assets
              if: inputs.expected-asset-count
              uses: actions/github-script@v7
              env:
                  RELEASE_ID: ${{ steps.draft-release.outputs.id }}
                  EXPECTED_ASSET_COUNT: ${{ inputs.expected-asset-count }}
              with:
                  retries: 3
                  script: |
                      const { RELEASE_ID: release_id, EXPECTED_ASSET_COUNT } = process.env;
                      const { owner, repo } = context.repo;

                      const { data: release } = await github.rest.repos.getRelease({
                          owner,
                          repo,
                          release_id,
                      });

                      if (release.assets.length !== parseInt(EXPECTED_ASSET_COUNT, 10)) {
                          core.setFailed(`Found ${release.assets.length} assets but expected ${EXPECTED_ASSET_COUNT}`);
                      }

            - name: Repoint draft release at signed tag
              if: inputs.gpg-fingerprint
              uses: actions/github-script@v7
              env:
                  RELEASE_ID: ${{ steps.draft-release.outputs.id }}
              with:
                  retries: 3
                  github-token: ${{ secrets.ELEMENT_BOT_TOKEN }}
                  script: |
                      const { RELEASE_ID: release_id, VERSION } = process.env;
                      const { owner, repo } = context.repo;

                      github.rest.repos.updateRelease({
                          owner,
                          repo,
                          release_id,
                          tag_name: VERSION,
                      });

            - name: Print summary
              run: |
                  echo "[Draft release created]($URL)" >> $GITHUB_STEP_SUMMARY
              env:
                  URL: ${{ steps.draft-release.outputs.html_url }}
